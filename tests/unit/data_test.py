
# test integrity of the input data
import os
import numpy as np
import pandas as pd

# get absolute path of csv files from data folder
def get_absPath(filename):
    """Returns the path of the notebooks folder"""
    path = os.path.abspath(
        os.path.join(
            os.path.dirname(__file__), os.path.pardir, os.path.pardir, "data", filename
        )
    )
    return path

# number of features
expected_columns = 147

# distribution of features in the training set
historical_mean = np.array(
    [
        6956.0 ,
        6250.892546539208 ,
        82.15560986128082 ,
        113.58427370085532 ,
        82.7702867821462 ,
        125.96370301157191 ,
        84.17350679220873 ,
        138.33637605117517 ,
        86.65837705742831 ,
        150.48336088550278 ,
        91.29792280600877 ,
        161.8665995831237 ,
        98.61748005462518 ,
        171.89994968734277 ,
        107.92647164522388 ,
        180.19233810105658 ,
        118.6141019190685 ,
        186.72435851362036 ,
        130.80119312872853 ,
        188.45834830733847 ,
        142.87112772227414 ,
        186.25206641270753 ,
        153.316682239632 ,
        179.44986703083447 ,
        162.39984187450585 ,
        170.95536548551715 ,
        169.39322935384172 ,
        160.72867102709696 ,
        173.70732408538777 ,
        149.14432545101704 ,
        175.7447710774096 ,
        136.808668152088 ,
        176.59541436066988 ,
        124.33745417954431 ,
        176.8016962553008 ,
        111.87127147272335 ,
        92.03363760511752 ,
        104.24358513620355 ,
        97.40465751455473 ,
        98.73722417882556 ,
        105.2581758067994 ,
        96.79343060447064 ,
        113.59907999712499 ,
        97.59297060303314 ,
        121.35039171997413 ,
        100.53784230575721 ,
        136.25508517214115 ,
        100.05246891396536 ,
        144.1011284410264 ,
        96.88435276360238 ,
        152.41709192841228 ,
        95.77517429741968 ,
        160.36613239416374 ,
        97.50880471501473 ,
        165.95105297204054 ,
        102.69122403507511 ,
        129.11607848774528 ,
        109.40760439876375 ,
        129.26090706533458 ,
        117.10580033062604 ,
        129.39682311507224 ,
        124.81104003450011 ,
        129.57262991446848 ,
        132.77704305325955 ,
        120.35966362394882 ,
        138.69977718680371 ,
        124.86286207144397 ,
        140.38388557464242 ,
        129.74663983324947 ,
        141.74139294185295 ,
        134.6105800330626 ,
        140.1927693524042 ,
        138.95629986343707 ,
        138.41242003881263 ,
        101.52627039459499 ,
        111.8402213756918 ,
        106.32113850355782 ,
        108.97124991015598 ,
        112.03615323797887 ,
        108.89477467117085 ,
        117.08783152447351 ,
        112.16603176884928 ,
        111.88629339466686 ,
        113.3159634873859 ,
        106.26910084094013 ,
        113.47308272838353 ,
        141.14432545101704 ,
        111.67778336807302 ,
        146.16365988643716 ,
        108.1526629770718 ,
        151.83641198878746 ,
        108.1034284482139 ,
        156.66599583123698 ,
        110.7474304607202 ,
        152.19090059656438 ,
        112.51261410191907 ,
        146.6547832961978 ,
        112.62509882843383 ,
        112.06166894271544 ,
        155.2310788471214 ,
        118.45856393301229 ,
        151.58743621073816 ,
        125.07144397326242 ,
        150.02910946596708 ,
        129.90009343779198 ,
        151.03586573708043 ,
        134.9629123841012 ,
        149.90260907065334 ,
        141.7582117444117 ,
        151.2730539782937 ,
        148.2774383669949 ,
        154.58599870624596 ,
        145.46956084237763 ,
        154.80277438366994 ,
        135.0804283763387 ,
        153.61676130237908 ,
        129.97311866599583 ,
        154.16430676345863 ,
        125.11356285488392 ,
        153.8137712930353 ,
        114.8417307554086 ,
        155.35060734564794 ,
        148.2774383669949 ,
        154.58599870624596 ,
        142.1648098900309 ,
        161.04197513117228 ,
        135.59807374398045 ,
        163.92000287500898 ,
        130.17803493135915 ,
        164.54086106519082 ,
        124.95766549270466 ,
        164.1291597786243 ,
        118.3830230719471 ,
        161.52720477251492 ,
        112.06166894271544 ,
        155.2310788471214 ,
        114.8417307554086 ,
        155.35060734564794 ,
        125.05361891755912 ,
        158.30482282757134 ,
        130.02364694889673 ,
        158.798893121541 ,
        135.2253288291526 ,
        158.10615970674908 ,
        145.46956084237763 ,
        154.80277438366994 ,
        0.05354704233450729 , 
    ]
)
historical_std = np.array(
    [
       4016.4814825914486 ,
        3954.100560409573 ,
        30.5361216082848 ,
        13.580557041189593 ,
        30.26016412409895 ,
        14.40710230242378 ,
        30.03610913260939 ,
        15.485268556646227 ,
        29.694782993231183 ,
        16.731981369506876 ,
        28.979013382882396 ,
        17.91791793898314 ,
        28.000508586179762 ,
        18.924106791406498 ,
        26.991021152684347 ,
        19.797855857459147 ,
        26.070726878464622 ,
        20.56325867789387 ,
        25.1538739263848 ,
        20.775515902505187 ,
        24.317447732703187 ,
        20.485890814810205 ,
        23.81248129117152 ,
        19.690348883398258 ,
        23.689290434415565 ,
        18.79653183733707 ,
        23.880355831479807 ,
        17.792702751798704 ,
        24.183073293198976 ,
        16.59676392921979 ,
        24.293505940023472 ,
        15.333715146691919 ,
        24.33089884375151 ,
        14.214578598253377 ,
        24.51100825317363 ,
        13.371995659330103 ,
        28.15841045710887 ,
        11.72532060660126 ,
        27.640807086151696 ,
        11.093366150160712 ,
        26.954256813314416 ,
        10.822687178330954 ,
        26.303976882661402 ,
        10.862092263526318 ,
        25.766541609250375 ,
        11.007598158745255 ,
        24.744708170171954 ,
        10.928474190745051 ,
        24.167722940065804 ,
        10.729765595004277 ,
        23.656712942565363 ,
        10.65739107663125 ,
        23.281203627004203 ,
        10.868070162966642 ,
        23.179599287038457 ,
        11.431791051271377 ,
        25.170036377737596 ,
        11.52636387062746 ,
        25.270541475915618 ,
        12.317372798225623 ,
        25.4420240650498 ,
        13.272339290505169 ,
        25.656843890152178 ,
        14.33088403320016 ,
        25.87133400457135 ,
        14.466194082306044 ,
        25.595714925432606 ,
        14.66493381241068 ,
        25.27748804878872 ,
        14.848965350534282 ,
        24.88267773245246 ,
        14.63608041644502 ,
        24.524467354388317 ,
        14.413389519052245 ,
        27.188341472599557 ,
        11.941363509171694 ,
        26.797245703842627 ,
        11.686208099481963 ,
        26.351877000112825 ,
        11.615707716911023 ,
        25.95976100307486 ,
        11.74992954664855 ,
        26.335733944860706 ,
        11.879622596871299 ,
        26.763167646961943 ,
        11.963735965611747 ,
        24.26958016052955 ,
        11.663544766163358 ,
        24.002641977747295 ,
        11.478790551957246 ,
        23.712092828284643 ,
        11.528367662384015 ,
        23.51393589613338 ,
        11.745762791234213 ,
        23.709654402890582 ,
        11.784758690528397 ,
        23.96745343870854 ,
        11.754266215244968 ,
        26.46364303215978 ,
        16.658124304410165 ,
        25.9969288147572 ,
        16.006979599736663 ,
        25.542330582260952 ,
        15.840731727898959 ,
        25.16750544272883 ,
        15.965093425768938 ,
        24.749972936350286 ,
        15.826376637636688 ,
        24.286794297528147 ,
        15.969614413841454 ,
        24.05017261379351 ,
        16.57263828996088 ,
        24.237004484017938 ,
        16.52041623989162 ,
        24.73516568679318 ,
        16.194566553587034 ,
        25.156188278071685 ,
        16.26297949975687 ,
        25.52857909078709 ,
        16.23229003853347 ,
        26.237461052885482 ,
        16.582611897696367 ,
        24.05017261379351 ,
        16.57263828996088 ,
        24.286715077377675 ,
        17.366747022298945 ,
        24.71345913503876 ,
        17.912436294598294 ,
        25.142849510415086 ,
        18.01282013522621 ,
        25.5523963952935 ,
        17.945353642587254 ,
        26.01588329989211 ,
        17.428994107781605 ,
        26.46364303215978 ,
        16.658124304410165 ,
        26.237461052885482 ,
        16.582611897696367 ,
        25.539047667098803 ,
        17.147158134412926 ,
        25.14789951889265 ,
        17.22758751632672 ,
        24.733988138088645 ,
        17.116424310453088 ,
        24.237004484017938 ,
        16.52041623989162 ,
        0.22512973920043275 , â€‹
    ]
)

# maximal relative change in feature mean or standrd deviation
# that we can tolerate
shift_tolerance = 3

def test_check_schema():
    datafile = get_absPath("Final.csv")
    # check that file exists
    assert os.path.exists(datafile)
    dataset = pd.read_csv(datafile)
    header = dataset[dataset.columns[:-1]]
    actual_columns = header.shape[1]
    # check header has expected number of columns
    assert actual_columns == expected_columns


def test_check_missing_values():
    datafile = get_absPath("Final.csv")
    # check that file exists
    assert os.path.exists(datafile)
    dataset = pd.read_csv(datafile)
    n_nan = np.sum(np.isnan(dataset.values))
    assert n_nan > 0


def test_check_distribution():
    datafile = get_absPath("Final.csv")
    # check that file exists
    assert os.path.exists(datafile)
    dataset = pd.read_csv(datafile)
    mean = np.mean(dataset.values, axis=0)
    std = np.mean(dataset.values, axis=0)
    assert (
        np.sum(abs(mean - historical_mean) > shift_tolerance * abs(historical_mean))
        or np.sum(abs(std - historical_std) > shift_tolerance * abs(historical_std)) > 0
    )